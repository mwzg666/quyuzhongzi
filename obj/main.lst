C251 COMPILER V5.60.0,  main                                                               18/03/24  10:00:13  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\obj\main.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE User\main.c XSMALL INTR2 OPTIMIZE(0,SPEED) BROWSE INCDIR(.\User;.\Hard
                    -ware\ADC;.\Hardware\CalcCPS;.\Hardware\CalcDoseRate;.\Hardware\Cmd;.\Hardware\DisPlay;.\Hardware\Flash;.\Hardware\IIC;.\
                    -Hardware\Mcp4725;.\Hardware\Sensor;.\Hardware\SPI;.\Hardware\System;.\Hardware\Uart;.\User) PRINT(.\obj\main.lst) OBJECT
                    -(.\obj\main.obj) 

stmt  level    source

    1          #include "Sensor.h"
    2          #include "mcp4725.h"
    3          #include "system.h"
    4          #include "main.h"
    5          #include "CMD.h"
    6          #include "uart.h"
    7          #include "i2c.h"
    8          #include "flash.h"
    9          #include "CalcDoseRate.h"
   10          
   11          LP_SYSTEM_STTAE SysRunState={0};
   12          
   13          //========================================================================
   14          // 函数名称: void InitParam()
   15          // 函数功能: 初始化各个参数
   16          // 入口参数: @无
   17          // 函数返回: 无
   18          // 当前版本: VER1.0
   19          // 修改日期: 2023.5.5
   20          // 当前作者:
   21          // 其他备注: 
   22          //========================================================================
   23          void InitParam()
   24          {
   25   1              memset((void*)&SysRunState.stParam,0,sizeof(LP_PARAM));
   26   1          SysRunState.stParam.Sign     = 0x4142;
   27   1              SysRunState.stParam.address = 1;                         //探头地址
   28   1              
   29   1              SysRunState.stParam.s_Alarm.DosePreAlarm      = 300;     //300uSv
   30   1              SysRunState.stParam.s_Alarm.DoseAlarm         = 400;     //400uSv
   31   1              SysRunState.stParam.s_Alarm.DoseRatePreAlarm = 300;      //300uSv/h
   32   1              SysRunState.stParam.s_Alarm.DoseRateAlarm     = 400;     //400uSv/h
   33   1          SysRunState.stParam.s_Alarm.InvalidAlarm1     = 0;      
   34   1              SysRunState.stParam.s_Alarm.InvalidAlarm2     = 0; 
   35   1          
   36   1              SysRunState.stParam.s_SysParam.Canshu1 = 1;
   37   1              SysRunState.stParam.s_SysParam.Canshu2 = 1;
   38   1      
   39   1          #ifdef POE_SEN
   40   1          // 低量程用Co60拟合，最后剂量率要乘Co/Cs比
   41   1          SysRunState.stParam.s_Jiaozhun.DI_A = -2.8421709430404E-14;//-0.119135107108512;    
   42   1              SysRunState.stParam.s_Jiaozhun.DI_B = 0.23314990868541;//0.406688356856999; 
   43   1              SysRunState.stParam.s_Jiaozhun.DI_C = 0.000122186491801752;//-0.000795882360575705;
   44   1          SysRunState.stParam.s_Jiaozhun.DI_D = -1.48593654542308E-07;//8.30493670182536E-06;
   45   1      
   46   1          //SysRunState.stParam.s_Jiaozhun.MID_A = 25.2437957332788;    
   47   1              //SysRunState.stParam.s_Jiaozhun.MID_B = 0.352560222117065; 
   48   1              //SysRunState.stParam.s_Jiaozhun.MID_C = 6.84378068779986E-05;
   49   1          //SysRunState.stParam.s_Jiaozhun.MID_D = 0;
   50   1          
   51   1          // Cs137 > 1.2m
   52   1              //SysRunState.stParam.s_Jiaozhun.GAO_A = -32435.201473664; 
   53   1              //SysRunState.stParam.s_Jiaozhun.GAO_B = 35.1613941353375; 
   54   1              //SysRunState.stParam.s_Jiaozhun.GAO_C = -6.81597532235814E-4;  
   55   1          //SysRunState.stParam.s_Jiaozhun.GAO_D = 2.46287003496529E-08;
   56   1          SysRunState.stParam.s_Jiaozhun.GAO_A = 0;                    // 31.92;
C251 COMPILER V5.60.0,  main                                                               18/03/24  10:00:13  PAGE 2   

   57   1              SysRunState.stParam.s_Jiaozhun.GAO_B = 0;                    // 0.000018;
   58   1              SysRunState.stParam.s_Jiaozhun.GAO_C = 0;
   59   1          SysRunState.stParam.s_Jiaozhun.SUPER_GAO_A = 0;
   60   1          SysRunState.stParam.s_Jiaozhun.SUPER_GAO_B = 0;
   61   1          SysRunState.stParam.s_Jiaozhun.SUPER_GAO_C = 0;
   62   1          #else
                       SysRunState.stParam.s_Jiaozhun.DI_A = 0.5593;                // 0.56;
                       SysRunState.stParam.s_Jiaozhun.DI_B = 0.000119;              // 0.00017;
                       SysRunState.stParam.s_Jiaozhun.DI_C = SysRunState.stParam.s_SysParam.Canshu1;
                       SysRunState.stParam.s_Jiaozhun.GAO_A = 0;                    // 31.92;
                       SysRunState.stParam.s_Jiaozhun.GAO_B = 0;                    // 0.000018;
                       SysRunState.stParam.s_Jiaozhun.GAO_C = SysRunState.stParam.s_SysParam.Canshu2;
                   SysRunState.stParam.s_Jiaozhun.SUPER_GAO_A = 0;
                   SysRunState.stParam.s_Jiaozhun.SUPER_GAO_B = 0;
                   SysRunState.stParam.s_Jiaozhun.SUPER_GAO_C = 0;
                   #endif
   73   1          
   74   1              sprintf((char*)SysRunState.stParam.s_SysParam.yuzhi1,"150");
   75   1      
   76   1          SysRunState.stParam.CoCsRate = 1.19;
   77   1          
   78   1          WritePara();                    //保存参数
   79   1      }
   80          
   81          //========================================================================
   82          // 函数名称: void delay_ms(WORD ms)  
   83          // 函数功能: 毫秒延时函数
   84          // 入口参数: @WORD ms：延时多少毫秒
   85          // 函数返回: 无
   86          // 当前版本: VER1.0
   87          // 修改日期: 2023.5.5
   88          // 当前作者:
   89          // 其他备注: 
   90          //========================================================================
   91          void delay_ms(WORD ms)              
   92          {
   93   1          WORD t = 1000;
   94   1          while(ms--)
   95   1          {
   96   2              for (t=0;t<1000;t++) ;
   97   2          }
   98   1      }
   99          
  100          
  101          void delay_us(BYTE us)
  102          {
  103   1          while(us--)
  104   1          {
  105   2              ;
  106   2          }
  107   1      }
  108          
  109          //========================================================================
  110          // 函数名称: void IoInit()
  111          // 函数功能: 单片机I/O口初始化
  112          // 入口参数: @无
  113          // 函数返回: 无
  114          // 当前版本: VER1.0
  115          // 修改日期: 2023.5.5
  116          // 当前作者:
  117          // 其他备注: 
  118          //========================================================================
  119          void IoInit()
  120          {
  121   1          EAXFR = 1;
  122   1          WTST = 0;                       //设置程序指令延时参数，赋值为0可将CPU执行指令的速度设置为最快
C251 COMPILER V5.60.0,  main                                                               18/03/24  10:00:13  PAGE 3   

  123   1      
  124   1          P0M1 = 0x10;   P0M0 = 0x00;     //设置为准双向口
  125   1          P1M1 = 0x00;   P1M0 = 0x00;     //设置为准双向口
  126   1          P2M1 = 0x00;   P2M0 = 0x00;     //设置为准双向口
  127   1          P3M1 = 0x00;   P3M0 |= (1<<3) ;     //P3.3设置为推挽输出
  128   1          P4M1 = 0x00;   P4M0 = 0x00;     //设置为准双向口
  129   1          P5M1 = 0x00;   P5M0 = 0x00;     //设置为准双向口
  130   1          P6M1 = 0x00;   P6M0 = 0x00;     //设置为准双向口
  131   1          P7M1 = 0x00;   P7M0 = 0x00;     //设置为准双向口
  132   1      }
  133          
  134          //========================================================================
  135          // 函数名称: void TimerTask()
  136          // 函数功能: 定时任务，通过定时器0定时10ms来设置相关任务
  137          // 入口参数: @无
  138          // 函数返回: 无
  139          // 当前版本: VER1.0
  140          // 修改日期: 2023.5.5
  141          // 当前作者:
  142          // 其他备注: 
  143          //========================================================================
  144          void TimerTask()
  145          {
  146   1          u16 delta = 0;
  147   1          static u16 Time1s = 0;
  148   1          static u16 CpsTime = 0;
  149   1          if(Timer0Cnt)
  150   1          {
  151   2              delta = Timer0Cnt * 10;
  152   2              Timer0Cnt = 0;
  153   2              if(RX1_Cnt>0)
  154   2              {
  155   3                  Rx1_Timer += delta;
  156   3              }
  157   2              Time1s += delta;
  158   2              if(Time1s >= 1000)                      //100*10=1000ms
  159   2              {
  160   3                  CpsTime += Time1s;
  161   3                  Time1s = 0;
  162   3                  SysRunState.isCanReadSensor = 1;
  163   3      
  164   3                  PluseCnt = ((u32)LowOverFlowFlag*65536) | (u32)((u32)T3H*256+T3L) ;
  165   3                  T3R = 0; 
  166   3                  T3H = 0;
  167   3                  T3L = 0;
  168   3                  T3R = 1;            
  169   3      
  170   3                  PlusePortCnt = 0;
  171   3                  LowOverFlowFlag = 0;
  172   3              }
  173   2              
  174   2              if(CpsTime >= 10000)
  175   2              {
  176   3                  CpsTime = 0;
  177   3                  CPSFlag = 1;
  178   3              }
  179   2          }
  180   1      }
  181          
  182          //========================================================================
  183          // 函数名称: void Rs485Hnd()
  184          // 函数功能: 通过RS485与上位机握手
  185          // 入口参数: @无
  186          // 函数返回: 无
  187          // 当前版本: VER1.0
  188          // 修改日期: 2023.5.5
C251 COMPILER V5.60.0,  main                                                               18/03/24  10:00:13  PAGE 4   

  189          // 当前作者:
  190          // 其他备注: 
  191          //========================================================================
  192          void Rs485Hnd()
  193          {
  194   1          if(Rx1_Timer > 20)                  //串口超时20ms
  195   1          {
  196   2              Rx1_Timer = 0;
  197   2              DataPro(RX1_Buffer,RX1_Cnt);
  198   2              ClearRs485Buf();
  199   2          }
  200   1      }
  201          
  202          
  203          void Error()
  204          {
  205   1          while(1)
  206   1          {
  207   2              
  208   2              RUN_LED(1);
  209   2              delay_ms(200);
  210   2              RUN_LED(0);
  211   2              delay_ms(200);
  212   2          }
  213   1      }
  214          
  215          int main(void)
  216          { 
  217   1          SysInit();
  218   1              IoInit();
  219   1              checkApp();
  220   1              Timer0_Init();
  221   1              Timer3_Init();
  222   1              SensorInit();
  223   1          Uart1_Init();
  224   1          ClearRs485Buf();
  225   1          
  226   1              delay_ms(1000);    
  227   1              GetPara(&SysRunState.stParam);
  228   1          memcpy(SysRunState.stParam.VerSion,VERSION,6);        
  229   1          MCP4725_OutVol(MCP4725_S1_ADDR,SysRunState.stParam.s_SysParam.yuzhi1);
  230   1              EA = 1;  
  231   1          
  232   1              ClearCounter();
  233   1              SensorMeasureBegin();                       //开始测量
  234   1              delay_ms(100);
  235   1          while(1)
  236   1          { 
  237   2              TimerTask();
  238   2              if(SysRunState.isCanReadSensor == 1)
  239   2                      {
  240   3                              SysRunState.isCanReadSensor = 0;
  241   3                              CaptureSensorPluseCounter();        //捕获当前测量结果
  242   3                      }        
  243   2              Rs485Hnd(); 
  244   2          }
  245   1      }
  246          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       737     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
C251 COMPILER V5.60.0,  main                                                               18/03/24  10:00:13  PAGE 5   

  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       183     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       199     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
