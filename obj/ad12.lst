C251 COMPILER V5.60.0,  ad12                                                               24/04/23  18:25:29  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE ad12
OBJECT MODULE PLACED IN .\obj\ad12.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE Hardware\ADC\ad12.c XSMALL INTR2 OPTIMIZE(0,SPEED) BROWSE INCDIR(.\Use
                    -r;.\Hardware\ADC;.\Hardware\CalcCPS;.\Hardware\CalcDoseRate;.\Hardware\Cmd;.\Hardware\DisPlay;.\Hardware\Flash;.\Hardwar
                    -e\IIC;.\Hardware\Mcp4725;.\Hardware\Sensor;.\Hardware\SPI;.\Hardware\System;.\Hardware\Uart) PRINT(.\obj\ad12.lst) OBJEC
                    -T(.\obj\ad12.obj) 

stmt  level    source

    1          #include "main.h"
    2          #include "adc12.h"
    3          
    4          #define SAMPLE_NUM 20 //²ÉÑùÆ½¾ù´ÎÊý
    5          
    6          unsigned int bat_result[SAMPLE_NUM];
    7          unsigned int hv_result[SAMPLE_NUM];
    8          unsigned char index=0;
    9          
   10          
   11          
   12          #define BAT_AD_VPP 3300//²Î¿¼µçÔ´ÎªÏµÍ³µçÔ´£¬ÏµÍ³µçÔ´±ä»¯ÐèÒªÐÞ¸Ä¸ÃÖµ,ADµÄ²Î¿¼µçÑ¹Ö»ÊÇ×÷ÎªAD±¾ÉíÊ¹ÓÃ£¬²»É
             -æ¼°¼ÆËã
   13          #define BAT_VOL_RATION 6//·ÖÑ¹±È
   14          
   15          #define HV_AD_VPP 3300//²Î¿¼µçÔ´ÎªÏµÍ³µçÔ´£¬ÏµÍ³µçÔ´±ä»¯ÐèÒªÐÞ¸Ä¸ÃÖµ,ADµÄ²Î¿¼µçÑ¹Ö»ÊÇ×÷ÎªAD±¾ÉíÊ¹ÓÃ£¬²»Éæ
             -¼°¼ÆËã
   16          #define HV_VOL_RATION 1651//·ÖÑ¹±È,¸ù¾Ýµç×è¼ÆËã³öÀ´
   17          /*
   18          void Init_ADC12()
   19          {
   20              P6DIR &= ~(BIT5);
   21              P6SEL |= BIT5;
   22          
   23              REFCTL0 &= ~REFMSTR;   //ÐèÒªÊ¹ÓÃÄÚ²¿²Î¿¼£¬±ØÐëÓÃ¸ÃÖµ
   24              REFCTL0 |= REFON | REFVSEL1 | REFVSEL0;
   25              //ADC12CTL0 = ADC12ON+ADC12MSC+ADC12SHT0_2; // Turn on ADC12, set sampling time
   26              ADC12CTL0 = ADC12ON+ADC12MSC+ADC12SHT0_2 | ADC12REFON | ADC12REF2_5V;
   27              ADC12CTL1 = ADC12SHP+ADC12CONSEQ_3;       // Use sampling timer, single sequence
   28              ADC12MCTL0 = ADC12INCH_5;                 // ref+=AVcc, channel = A0
   29              //ADC12MCTL1 = ADC12INCH_15+ADC12EOS;        // ref+=AVcc, channel = A1, end seq.
   30              ADC12IE = 0x02;                           // Enable ADC12IFG.3
   31              ADC12CTL0 |= ADC12ENC;                    // Enable conversion
   32              ADC12CTL0 |= ADC12SC;
   33              _EINT();
   34          }
   35          */
   36          #if 0
               void Adc_Init()
               {
                   P_SW2 |= 0x80;
                   ADCTIM = 0x3f;      //ÉèÖÃ ADC ÄÚ²¿Ê±Ðò£¬ADC²ÉÑùÊ±¼ä½¨ÒéÉè×î´óÖµ
                   ADCCFG = 0x2f;      //ÉèÖÃ ADC Ê±ÖÓÎªÏµÍ³Ê±ÖÓ/2/16/16
                   ADC_CONTR = 0x80;   //Ê¹ÄÜ ADC Ä£¿é
                   _nop_();
                   _nop_();
                   
               }
               
               /*
               void ADC12_Start()
               {
                   ADC12CTL0 |= ADC12ENC;
                   ADC12CTL0 |= ADC12SC;
               }
               */
C251 COMPILER V5.60.0,  ad12                                                               24/04/23  18:25:29  PAGE 2   

               
               unsigned int Get_Bat_Vol()
               {
                   unsigned char i;
                   unsigned int value,result;
                   unsigned long sum_adc=0;
                   
                   ADC_RES = 0;
                   ADC_RESL = 0;
                   for(index = 0; index < SAMPLE_NUM;index++)
                   {
                        ADC_CONTR = (ADC_CONTR & 0xe0) | 0x40 | 0x04;    //Æô¶¯ AD ×ª»»
                       _nop_();
                       _nop_();
               
                       while(!ADC_FLAG)
               
                       {
                           ;
                       }
                       ADC_FLAG = 0;   //Çå³ýADC½áÊø±êÖ¾
                       
                       bat_result[index] = ((uint)(ADC_RES << 8)) | ADC_RESL ;
                       if(index >= SAMPLE_NUM)
                       {
                           index = 0;
                           ADC_START = 0;
                       }
                   }    
               
                   for(i=0;i<SAMPLE_NUM;i++)
                   {    
                       sum_adc+= bat_result[i];   //Get Result AD valude
                       
                   }
                    
                   value=(unsigned int)(sum_adc/SAMPLE_NUM);
                   #if 0
                   Show5X7Int(80,10,value,0);
                   #endif
                   result=((long)value*BAT_AD_VPP/4096)*BAT_VOL_RATION;
                   #if 0
                   Show5X7Int(80,20,result,0);
                   #endif
                   return result;
               }
               
               
               
               
               
               unsigned long Get_HV_Vol()
               {
                   unsigned char i;
                   unsigned int value;
                   unsigned long sum_adc=0,result1=0;
                   ADC_RES = 0;
                   ADC_RESL = 0;
                   
                   for(index = 0; index < SAMPLE_NUM;index++)
                   {
                        ADC_CONTR = (ADC_CONTR & 0xe0) | 0x40 | 0x04;    //Æô¶¯ AD ×ª»»
                       _nop_();
                       _nop_();
               
                       while(!ADC_FLAG)
C251 COMPILER V5.60.0,  ad12                                                               24/04/23  18:25:29  PAGE 3   

               
                       {
                           ;
                       }
                       ADC_FLAG = 0;   //Çå³ýADC½áÊø±êÖ¾
                       
                       hv_result[index] = ((uint)(ADC_RES << 8)) | ADC_RESL ;
                       if(index >= SAMPLE_NUM)
                       {
                           index = 0;
                           ADC_START = 0;
                       }
                   } 
                   
                   for(i=0;i<SAMPLE_NUM;i++)
                   {
                       sum_adc+= hv_result[i];   //Get Result AD valude
                   }
               
                   value=(unsigned int)(sum_adc/SAMPLE_NUM);
               
                   result1=((long)value*HV_AD_VPP/4096)*HV_VOL_RATION;
               
                   return result1/1000;
                   
               }
               
               #endif
  149          
  150          #if 0
               void Test_ADC12()
               {
                 delay_ms(10000);
                 volatile unsigned int bat_vol=0,tmp1=0;
                 volatile unsigned long hv_vol=0,tmp2=0;
                 //Init_ADC12();
                 delay_ms(1000);
                 bat_vol = Get_Bat_Vol();
                 hv_vol = Get_HV_Vol();
                 tmp1 = bat_vol;
                 tmp2 = hv_vol;
                 _NOP();
               }
               #endif
  165          
  166          
  167          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        81     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         5     ------
C251 COMPILER V5.60.0,  ad12                                                               24/04/23  18:25:29  PAGE 4   

End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
