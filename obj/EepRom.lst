C251 COMPILER V5.60.0,  EepRom                                                             28/03/23  15:28:01  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE EepRom
OBJECT MODULE PLACED IN .\obj\EepRom.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE Flash\EepRom.c XSMALL INTR2 OPTIMIZE(0,SPEED) BROWSE INCDIR(.\Ads1110;
                    -.\Flash;.\mcp4725;.\IIC;.\MwPro;.\Uart) PRINT(.\obj\EepRom.lst) OBJECT(.\obj\EepRom.obj) 

stmt  level    source

    1          #include "main.h"
    2          
    3          #define     IAP_STANDBY()   IAP_CMD = 0     //IAP空闲命令（禁止）
    4          #define     IAP_READ()      IAP_CMD = 1     //IAP读出命令
    5          #define     IAP_WRITE()     IAP_CMD = 2     //IAP写入命令
    6          #define     IAP_ERASE()     IAP_CMD = 3     //IAP擦除命令
    7          
    8          #define     IAP_ENABLE()    IAP_CONTR = IAP_EN; IAP_TPS = MAIN_Fosc / 1000000
    9          #define     IAP_DISABLE()   IAP_CONTR = 0; IAP_CMD = 0; IAP_TRIG = 0; IAP_ADDRE = 0xff; IAP_ADDRH = 0xff;
             - IAP_ADDRL = 0xff
   10          
   11          #define IAP_EN          (1<<7)
   12          #define IAP_SWBS        (1<<6)
   13          #define IAP_SWRST       (1<<5)
   14          #define IAP_CMD_FAIL    (1<<4)
   15          
   16          
   17          //========================================================================
   18          // 函数: void DisableEEPROM(void)
   19          // 描述: 禁止EEPROM.
   20          // 参数: none.
   21          // 返回: none.
   22          // 版本: V1.0, 2014-6-30
   23          //========================================================================
   24          void DisableEEPROM(void)        //禁止访问EEPROM
   25          {
   26   1          IAP_CONTR = 0;          //关闭 IAP 功能
   27   1          IAP_CMD = 0;            //清除命令寄存器
   28   1          IAP_TRIG = 0;           //清除触发寄存器
   29   1          IAP_ADDRE = 0xff;       //将地址设置到非 IAP 区域
   30   1          IAP_ADDRH = 0xff;       //将地址设置到非 IAP 区域
   31   1          IAP_ADDRL = 0xff;
   32   1      }
   33          
   34          //========================================================================
   35          // 函数: void EEPROM_Trig(void)
   36          // 描述: 触发EEPROM操作.
   37          // 参数: none.
   38          // 返回: none.
   39          // 版本: V1.0, 2014-6-30
   40          //========================================================================
   41          void EEPROM_Trig(void)
   42          {
   43   1          F0 = EA;    //保存全局中断
   44   1          EA = 0;     //禁止中断, 避免触发命令无效
   45   1          IAP_TRIG = 0x5A;
   46   1          IAP_TRIG = 0xA5;                    //先送5AH，再送A5H到IAP触发寄存器，每次都需要如此
   47   1                                              //送完A5H后，IAP命令立即被触发启动
   48   1                                              //CPU等待IAP完成后，才会继续执行程序。
   49   1          _nop_();   //由于STC32G是多级流水线的指令系统，触发命令后建议加4个NOP，保证IAP_DATA的数据完成准备
   50   1          _nop_();
   51   1          _nop_();
   52   1          _nop_();
   53   1          EA = F0;    //恢复全局中断
   54   1      }
   55          
   56          //========================================================================
   57          // 函数: void EEPROM_SectorErase(u32 EE_address)
C251 COMPILER V5.60.0,  EepRom                                                             28/03/23  15:28:01  PAGE 2   

   58          // 描述: 擦除一个扇区.
   59          // 参数: EE_address:  要擦除的EEPROM的扇区中的一个字节地址.
   60          // 返回: none.
   61          // 版本: V1.0, 2014-6-30
   62          //========================================================================
   63          void EEPROM_SectorErase(u32 EE_address)
   64          {
   65   1          IAP_ENABLE();                       //设置等待时间，允许IAP操作，送一次就够
   66   1          IAP_ERASE();                        //宏调用, 送扇区擦除命令，命令不需改变时，不需重新送命令
   67   1                                              //只有扇区擦除，没有字节擦除，512字节/扇区。
   68   1                                              //扇区中任意一个字节地址都是扇区地址。
   69   1          IAP_ADDRE = (u8)(EE_address >> 16); //送扇区地址高字节（地址需要改变时才需重新送地址）
   70   1          IAP_ADDRH = (u8)(EE_address >> 8);  //送扇区地址中字节（地址需要改变时才需重新送地址）
   71   1          IAP_ADDRL = (u8)EE_address;         //送扇区地址低字节（地址需要改变时才需重新送地址）
   72   1          EEPROM_Trig();                      //触发EEPROM操作
   73   1          DisableEEPROM();                    //禁止EEPROM操作
   74   1          //Delay(10);
   75   1      }
   76          
   77          //========================================================================
   78          // 函数: void EEPROM_read_n(u32 EE_address,u8 *DataAddress,u8 lenth)
   79          // 描述: 读N个字节函数.
   80          // 参数: EE_address:  要读出的EEPROM的首地址.
   81          //       DataAddress: 要读出数据的指针.
   82          //       length:      要读出的长度
   83          // 返回: 0: 写入正确.  1: 写入长度为0错误.  2: 写入数据错误.
   84          // 版本: V1.0, 2014-6-30
   85          //========================================================================
   86          void EEPROM_read(u32 EE_address,u8 *DataAddress,u16 length)
   87          {
   88   1          EA = 0;  
   89   1          IAP_ENABLE();                           //设置等待时间，允许IAP操作，送一次就够
   90   1          IAP_READ();                             //送字节读命令，命令不需改变时，不需重新送命令
   91   1          do
   92   1          {
   93   2              IAP_ADDRE = (u8)(EE_address >> 16); //送地址高字节（地址需要改变时才需重新送地址）
   94   2              IAP_ADDRH = (u8)(EE_address >> 8);  //送地址中字节（地址需要改变时才需重新送地址）
   95   2              IAP_ADDRL = (u8)EE_address;         //送地址低字节（地址需要改变时才需重新送地址）
   96   2              EEPROM_Trig();                      //触发EEPROM操作
   97   2              *DataAddress = IAP_DATA;            //读出的数据送往
   98   2              EE_address++;
   99   2              DataAddress++;
  100   2          }while(--length);
  101   1      
  102   1          DisableEEPROM();
  103   1          EA = 1;  
  104   1      }
  105          
  106          
  107          //========================================================================
  108          // 函数: u8 EEPROM_write_n(u32 EE_address,u8 *DataAddress,u8 length)
  109          // 描述: 写N个字节函数.
  110          // 参数: EE_address:  要写入的EEPROM的首地址.
  111          //       DataAddress: 要写入数据的指针.
  112          //       length:      要写入的长度
  113          // 返回: 0: 写入正确.  1: 写入长度为0错误.  2: 写入数据错误.
  114          // 版本: V1.0, 2014-6-30
  115          //========================================================================
  116          bool EEPROM_write(u32 EE_address,u8 *DataAddress,u16 length)
  117          {
  118   1          bool ret = true;
  119   1          u8  i;
  120   1          u16 j;
  121   1          u8  *p;
  122   1          
  123   1          if(length == 0) return 1;   //长度为0错误
C251 COMPILER V5.60.0,  EepRom                                                             28/03/23  15:28:01  PAGE 3   

  124   1      
  125   1          IAP_ENABLE();                       //设置等待时间，允许IAP操作，送一次就够
  126   1          i = length;
  127   1          j = EE_address;
  128   1          p = DataAddress;
  129   1          IAP_WRITE();                            //宏调用, 送字节写命令
  130   1          do
  131   1          {
  132   2              IAP_ADDRE = (u8)(EE_address >> 16); //送地址高字节（地址需要改变时才需重新送地址）
  133   2              IAP_ADDRH = (u8)(EE_address >> 8);  //送地址中字节（地址需要改变时才需重新送地址）
  134   2              IAP_ADDRL = (u8)EE_address;         //送地址低字节（地址需要改变时才需重新送地址）
  135   2              IAP_DATA  = *DataAddress;           //送数据到IAP_DATA，只有数据改变时才需重新送
  136   2              EEPROM_Trig();                      //触发EEPROM操作
  137   2              EE_address++;                       //下一个地址
  138   2              DataAddress++;                      //下一个数据
  139   2          }while(--length);                       //直到结束
  140   1      
  141   1          EE_address = j;
  142   1          length = i;
  143   1          DataAddress = p;
  144   1          i = 0;
  145   1          IAP_READ();                             //读N个字节并比较
  146   1          do
  147   1          {
  148   2              IAP_ADDRE = (u8)(EE_address >> 16); //送地址高字节（地址需要改变时才需重新送地址）
  149   2              IAP_ADDRH = (u8)(EE_address >> 8);  //送地址中字节（地址需要改变时才需重新送地址）
  150   2              IAP_ADDRL = (u8)EE_address;         //送地址低字节（地址需要改变时才需重新送地址）
  151   2              EEPROM_Trig();                      //触发EEPROM操作
  152   2              if(*DataAddress != IAP_DATA)        //读出的数据与源数据比较
  153   2              {
  154   3                  ret = false;
  155   3                  break;
  156   3              }
  157   2              EE_address++;
  158   2              DataAddress++;
  159   2          }while(--length);
  160   1      
  161   1          DisableEEPROM();
  162   1          return ret;
  163   1      }
  164          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       476     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        32     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
