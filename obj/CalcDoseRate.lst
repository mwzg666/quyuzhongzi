C251 COMPILER V5.60.0,  CalcDoseRate                                                       13/06/23  16:02:13  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE CalcDoseRate
OBJECT MODULE PLACED IN .\obj\CalcDoseRate.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE Hardware\CalcDoseRate\CalcDoseRate.c XSMALL INTR2 OPTIMIZE(0,SPEED) BR
                    -OWSE INCDIR(.\User;.\Hardware\ADC;.\Hardware\CalcCPS;.\Hardware\CalcDoseRate;.\Hardware\Cmd;.\Hardware\DisPlay;.\Hardwar
                    -e\Flash;.\Hardware\IIC;.\Hardware\Mcp4725;.\Hardware\Sensor;.\Hardware\SPI;.\Hardware\System;.\Hardware\Uart;.\User) PRI
                    -NT(.\obj\CalcDoseRate.lst) OBJECT(.\obj\CalcDoseRate.obj) 

stmt  level    source

    1          #include <stdlib.h>
    2          #include <math.h>
    3          #include <main.h>
    4          #include "system.h"
    5          //#include "CommDataDefine.h"
    6          #include "CalcDoseRate.h"
    7          #include "sensor.h"
    8          
    9          extern float parama,paramb,paramc,paramd;
   10          
   11          static void CpsFilter(DWORD Cps);
   12          static float CounterPH();
   13          static float CpsToUsv_h(float count);
   14          
   15          // 取平均值
   16          #define CT 60   
   17          DWORD CpsArr[CT];
   18          static BOOL Full = FALSE;
   19          static BYTE ArrCnt = 0;
   20          static float CpsHis = 0;
   21          
   22          void InitArr()
   23          {
   24   1          BYTE i;
   25   1          // 初始状态填15 个  1
   26   1          memset(CpsArr,0,sizeof(CpsArr));
   27   1          for (i=0;i<CT;i+=4)
   28   1          {
   29   2              CpsArr[i] = 1;
   30   2          }
   31   1          Full = TRUE;
   32   1          ArrCnt = CT;
   33   1          CpsHis = 15.0/CT;
   34   1      }
   35          
   36          // 将计数压入堆栈
   37          void PushCps(DWORD cps)
   38          {
   39   1          BYTE i;
   40   1          if (ArrCnt >= CT)
   41   1          {
   42   2              Full = TRUE;
   43   2              for (i=1;i<CT;i++)
   44   2              {
   45   3                  CpsArr[i-1] = CpsArr[i];
   46   3              }
   47   2              CpsArr[CT-1] = cps;
   48   2          }
   49   1          else
   50   1          {
   51   2              CpsArr[ArrCnt++] = cps;
   52   2          }
   53   1      }
   54          
   55          void ClearCounter()
   56          {
C251 COMPILER V5.60.0,  CalcDoseRate                                                       13/06/23  16:02:13  PAGE 2   

   57   1          memset(CpsArr,0,sizeof(CpsArr));
   58   1          Full = FALSE;
   59   1          ArrCnt = 0;
   60   1          CpsHis = 0;
   61   1      }
   62          
   63          
   64          // 计数平滑
   65          float CounterPH()
   66          {
   67   1          #define BK_CPS 0.01
   68   1          float Val = 0.0;
   69   1          BYTE i;
   70   1          
   71   1          Val = 0.0;
   72   1          if (Full)
   73   1          {
   74   2              for (i=0;i<CT;i++)
   75   2              {
   76   3                  Val += CpsArr[i];
   77   3              }
   78   2              Val = Val/CT;
   79   2          }
   80   1          else
   81   1          {
   82   2              if (ArrCnt == 0)
   83   2              {
   84   3                  CpsHis = BK_CPS;
   85   3                  return -1;
   86   3              }
   87   2              else
   88   2              {
   89   3                  for (i=0;i<ArrCnt;i++)
   90   3                  {
   91   4                      Val += CpsArr[i];
   92   4                  }
   93   3                  Val = Val/ArrCnt;
   94   3              }
   95   2          }
   96   1      
   97   1          if (Val < BK_CPS)
   98   1          {
   99   2              Val = BK_CPS;
  100   2          }
  101   1          
  102   1          CpsHis = Val;
  103   1          return Val;
  104   1      }
  105          
  106          
  107          float GetHis(BYTE time)
  108          {
  109   1          BYTE i;
  110   1          float ret = 0.0;
  111   1          if (Full)
  112   1          {
  113   2              for (i=CT-time;i<CT;i++)
  114   2              {
  115   3                  ret += CpsArr[i];
  116   3              }
  117   2      
  118   2              return (ret/time);
  119   2          }
  120   1          else
  121   1          {
  122   2              if (time > ArrCnt)
C251 COMPILER V5.60.0,  CalcDoseRate                                                       13/06/23  16:02:13  PAGE 3   

  123   2              {
  124   3                  for (i=0;i<ArrCnt;i++)
  125   3                  {
  126   4                      ret += CpsArr[i];
  127   4                  }
  128   3      
  129   3                  return (ret/ArrCnt);
  130   3              }
  131   2              else
  132   2              {
  133   3                  for (i=ArrCnt-time;i<ArrCnt;i++)
  134   3                  {
  135   4                      ret += CpsArr[i];
  136   4                  }
  137   3      
  138   3                  return (ret/time);
  139   3              }
  140   2          }
  141   1      
  142   1          //return 0.0;
  143   1      }
  144          
  145          
  146          // time :  保留最后计数的时间
  147          void ResvCps(BYTE time)
  148          {
  149   1          BYTE i;
  150   1          if (Full)
  151   1          {
  152   2              for (i=0;i<CT;i++)
  153   2              {
  154   3                  if (i<time)
  155   3                  {
  156   4                      CpsArr[i] = CpsArr[CT-time+i];
  157   4                  }
  158   3                  else
  159   3                  {
  160   4                      CpsArr[i] = 0;
  161   4                  }
  162   3              }
  163   2              ArrCnt = time;
  164   2              Full = FALSE;
  165   2          }
  166   1          else
  167   1          {
  168   2              if (time < ArrCnt)
  169   2              {
  170   3                  for (i=0;i<ArrCnt;i++)
  171   3                  {
  172   4                      if (i<time)
  173   4                      {
  174   5                          CpsArr[i] = CpsArr[ArrCnt-time+i];
  175   5                      }
  176   4                      else
  177   4                      {
  178   5                          CpsArr[i] = 0;
  179   5                      }
  180   4                  }
  181   3      
  182   3                  ArrCnt = time;
  183   3              }
  184   2              else
  185   2              {
  186   3                  // 全部保留，就不做处理了
  187   3              }
  188   2          }
C251 COMPILER V5.60.0,  CalcDoseRate                                                       13/06/23  16:02:13  PAGE 4   

  189   1      }
  190          
  191          // 计数压入队列
  192          void AddCounter(DWORD Cps)
  193          {
  194   1          PushCps(Cps);   
  195   1      }
  196          
  197          
  198          void CpsFilter(DWORD Cps)
  199          {
  200   1          BYTE i;
  201   1          
  202   1          // 剂量率3-5秒响应
  203   1          static DWORD BigCpsErr[5] = {0};
  204   1          static BYTE BigErrCnt = 0;
  205   1          BYTE BigCpsTime = 0;
  206   1          
  207   1          static DWORD SmCpsErr[5] = {0};
  208   1          static BYTE SmErrCnt = 0;
  209   1      
  210   1          // 大于2CPS(0.8uSv/h左右) 才判断陡升 -- 盖格管的最小剂量为 1uSv/h
  211   1          if ( (Cps>(CpsHis+3*sqrt(CpsHis)))  
  212   1                && (Cps >= 2) )
  213   1          {
  214   2              if (Cps >= 4.0)   
  215   2              {
  216   3                  BigCpsTime = 3;  // 3秒响应
  217   3              }
  218   2              else        
  219   2              {
  220   3                  BigCpsTime = 5;  // 5秒响应
  221   3              }
  222   2              
  223   2      
  224   2              SmErrCnt = 0;
  225   2              BigCpsErr[BigErrCnt++] = Cps;
  226   2              if (BigErrCnt >= BigCpsTime)
  227   2              {
  228   3                  // 连续3个大计数则算陡升
  229   3                  ClearCounter();
  230   3                  for (i=0;i<BigErrCnt;i++)
  231   3                  {
  232   4                      AddCounter(BigCpsErr[i]);
  233   4                  }
  234   3                  
  235   3                  BigErrCnt = 0; 
  236   3              }
  237   2      
  238   2              return;
  239   2          }
  240   1          // 小计数
  241   1          if (CpsHis > 9)  // >4uSv/h 
  242   1          {
  243   2              if (Cps < (CpsHis-3*sqrt(CpsHis))) 
  244   2              {
  245   3                  BigErrCnt = 0;
  246   3                  SmCpsErr[SmErrCnt++] = Cps;
  247   3                  if (SmErrCnt == 3)
  248   3                  {
  249   4                      // 连续3个小计数则算陡降
  250   4                      ClearCounter();
  251   4                      for (i=0;i<SmErrCnt;i++)
  252   4                      {
  253   5                          AddCounter(SmCpsErr[i]);
  254   5                      }
C251 COMPILER V5.60.0,  CalcDoseRate                                                       13/06/23  16:02:13  PAGE 5   

  255   4                      SmErrCnt = 0;
  256   4                  }
  257   3                  return;
  258   3              }
  259   2          }
  260   1          else if (CpsHis > 4)   // 2.5uSv/h 左右
  261   1          {
  262   2              if (Cps < (CpsHis-2*sqrt(CpsHis))) 
  263   2              {
  264   3                  BigErrCnt = 0;
  265   3                  SmCpsErr[SmErrCnt++] = Cps;
  266   3                  if (SmErrCnt == 5)
  267   3                  {
  268   4                      // 连续5个小计数则算陡降
  269   4                      ClearCounter();
  270   4                      for (i=0;i<SmErrCnt;i++)
  271   4                      {
  272   5                          AddCounter(SmCpsErr[i]);
  273   5                      }
  274   4                      SmErrCnt = 0;
  275   4                  }
  276   3                  return;
  277   3              }
  278   2          }
  279   1      
  280   1      
  281   1          // 不属于突变的情况就直接进入队列
  282   1          AddCounter(Cps);
  283   1          BigErrCnt = 0;
  284   1          SmErrCnt = 0;
  285   1      }
  286          
  287          
  288          float CpsToUsv_h(float count)
  289          {   
  290   1          
  291   1          float ret;
  292   1      
  293   1          #ifdef POE_SEN
                   float c = count;
                   float c2 = c*c;
                   float c3 = c2*c;
                   ret = parama + paramb*c + paramc*c2 + paramd*c3;
                   #else
  299   1      
  300   1          if(CPSFlag)
  301   1          {
  302   2              CPSFlag = 0;
  303   2              if(count >= 1)
  304   2              {
  305   3                  count -= 1;
  306   3              }       
  307   2          }
  308   1      //    if(count < 0.02)
  309   1      //    {
  310   1      //        ret = 0;
  311   1      //        //Error();
  312   1      //    }
  313   1      //    else
  314   1      //    {
  315   1              ret = paramc * parama * count * exp(paramb*count);
  316   1          //}
  317   1          //printf("parama = %f\r\n paramb = %f\r\n paramc = %f\r\n",parama,paramb,paramc);
  318   1          #endif
  319   1          
  320   1          return ret;
C251 COMPILER V5.60.0,  CalcDoseRate                                                       13/06/23  16:02:13  PAGE 6   

  321   1      }
  322          
  323          // 每一秒被调用一次,输入参数，返回CPS，带出剂量率
  324          float SmothCpsCalcRate(float RealCPS, float OlduSvh, float *NewuSvh)
  325          {
  326   1          float CPS = 0;
  327   1          float dr = 0;
  328   1          
  329   1          CpsFilter((DWORD)RealCPS);    
  330   1          CPS = CounterPH(); //计数平滑
  331   1          
  332   1          if (CPS != -1)
  333   1          {
  334   2              //*NewuSvh = CpsToUsv_h(CPS);   // uSv/h
  335   2              dr =  CpsToUsv_h(CPS)*0.24;
  336   2              if(dr < 0.15)
  337   2              {
  338   3                  *NewuSvh = 0;
  339   3              }
  340   2              else
  341   2              {
  342   3                  *NewuSvh = dr;
  343   3              }
  344   2          }
  345   1          else
  346   1          {
  347   2              *NewuSvh = OlduSvh;
  348   2          }
  349   1          return CPS;
  350   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      2017     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       345     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        76     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
